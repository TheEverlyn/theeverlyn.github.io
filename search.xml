<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>搭建属于自己的Blog</title>
    <url>/2022/10/25/createBlog/</url>
    <content><![CDATA[<p>Hexo 是一个快速、简单且强大的博客框架。如果你想将 Hexo 部署到 GitHub Pages，以下是一个详细的步骤指南：</p>
<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>你已经安装了 Node.js 和 npm（Node 包管理器）。<br>你已经在 GitHub 上创建了一个仓库，用于存放你的 Hexo 博客。</p>
<h2 id="步骤一：安装-Hexo"><a href="#步骤一：安装-Hexo" class="headerlink" title="步骤一：安装 Hexo"></a>步骤一：安装 Hexo</h2><p>如果你还没有安装 Hexo，可以通过 npm 安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<h2 id="步骤二：初始化-Hexo-博客"><a href="#步骤二：初始化-Hexo-博客" class="headerlink" title="步骤二：初始化 Hexo 博客"></a>步骤二：初始化 Hexo 博客</h2><p>在你的本地计算机上创建一个新的 Hexo 博客：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init my-blog</span><br><span class="line"><span class="built_in">cd</span> my-blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h2 id="步骤三：配置-GitHub-Pages"><a href="#步骤三：配置-GitHub-Pages" class="headerlink" title="步骤三：配置 GitHub Pages"></a>步骤三：配置 GitHub Pages</h2><p>‌创建新仓库或配置现有仓库‌：</p>
<p>如果还没有仓库，去 GitHub 创建一个新的公共仓库，命名为 yourusername.github.io（yourusername 替换为你的 GitHub 用户名）。<br>如果你已经有仓库，确保仓库名称符合 GitHub Pages 的要求。</p>
<p>‌配置 _config.yml‌：<br>打开 Hexo 博客根目录下的 _config.yml 文件，并进行如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Your</span> <span class="string">Blog</span> <span class="string">Title</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">Your</span> <span class="string">Blog</span> <span class="string">Subtitle</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Your</span> <span class="string">Name</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://yourusername.github.io</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/yourusername/yourusername.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span>  <span class="comment"># or &#x27;master&#x27; if your default branch is named &#x27;master&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="步骤四：生成静态文件并部署"><a href="#步骤四：生成静态文件并部署" class="headerlink" title="步骤四：生成静态文件并部署"></a>步骤四：生成静态文件并部署</h2><p>在博客根目录下运行以下命令，生成静态文件并部署到 GitHub Pages：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<h2 id="步骤五：访问你的博客"><a href="#步骤五：访问你的博客" class="headerlink" title="步骤五：访问你的博客"></a>步骤五：访问你的博客</h2><p>部署成功后，你可以通过浏览器访问 <a class="link"   href="https://yourusername.github.io/" >https://yourusername.github.io<i class="fas fa-external-link-alt"></i></a> 查看你的 Hexo 博客。</p>
<h2 id="常见问题及解决"><a href="#常见问题及解决" class="headerlink" title="常见问题及解决"></a>常见问题及解决</h2><p>1.‌权限问题‌：</p>
<p>确保你有权限将代码推送到 GitHub 仓库。如果推送失败，可能需要配置 SSH key 或使用 GitHub 的 Personal Access Token。<br>也有可能是证书的问题，可以暂时关闭证书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.sslVerify <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>2.‌分支名称‌：</p>
<p>GitHub 默认分支可能是 main 或 master，请确保 _config.yml 中的分支名称与你的仓库默认分支一致。<br>具体实操：<br>  打开 GitHub 仓库的 Settings（设置） &gt; Pages（页面）。<br>  在 Source（源） 选项中，选择你的部署分支（例如 main 分支）并保存。<br>  确保你的 Hexo 生成的静态文件在 部署分支 的根目录下</p>
<p>3.项目名称</p>
<p>确保仓库名称为 username.github.io（与用户名一致，且全部小写）。</p>
<p>4.‌自定义域名‌：</p>
<p>如果你希望使用自定义域名，可以在 GitHub 仓库的设置中配置自定义域名，并在 DNS 提供商处添加相应的 CNAME 记录。</p>
<p>通过以上步骤，你应该能够成功将 Hexo 博客部署到 GitHub Pages。如果遇到问题，可以查看 Hexo 和 GitHub Pages 的官方文档，或搜索相关问题的解决方案。</p>
]]></content>
      <categories>
        <category>平台搭建</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Vue3实现一个完整的的SSR(服务端渲染)系统</title>
    <url>/2024/12/30/vue-ssr/</url>
    <content><![CDATA[<h3 id="实现一个基于-Vue-3-的-SSR（服务端渲染）系统，需要结合以下核心技术栈："><a href="#实现一个基于-Vue-3-的-SSR（服务端渲染）系统，需要结合以下核心技术栈：" class="headerlink" title="实现一个基于 Vue 3 的 SSR（服务端渲染）系统，需要结合以下核心技术栈："></a>实现一个基于 Vue 3 的 SSR（服务端渲染）系统，需要结合以下核心技术栈：</h3><ol>
<li>Vue 3：负责构建组件。</li>
<li>Vue Router：用于客户端和服务端的路由管理。</li>
<li>Pinia：管理应用状态。</li>
<li>Vite：用于开发和构建静态文件。</li>
<li>Express（或其他类似的服务端框架）：用于搭建服务端渲染服务器。</li>
</ol>
<p>以下是一个完整的实现步骤：</p>
<h2 id="1-初始化项目"><a href="#1-初始化项目" class="headerlink" title="1. 初始化项目"></a>1. 初始化项目</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init vite@latest vue-ssr --template vue</span><br><span class="line"><span class="built_in">cd</span> vue-ssr</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<h2 id="2-安装依赖"><a href="#2-安装依赖" class="headerlink" title="2. 安装依赖"></a>2. 安装依赖</h2><p>SSR 需要以下额外的依赖：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue-router pinia vite-plugin-vue-ssr express vue-server-renderer</span><br></pre></td></tr></table></figure>
<h2 id="3-配置-vite-config-ts"><a href="#3-配置-vite-config-ts" class="headerlink" title="3. 配置 vite.config.ts"></a>3. 配置 vite.config.ts</h2><p>在 Vite 中配置 SSR 渲染支持：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ssr <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-vue-ssr&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>(), <span class="title function_">ssr</span>()],</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">outDir</span>: <span class="string">&#x27;dist&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="4-创建-Vue-应用实例"><a href="#4-创建-Vue-应用实例" class="headerlink" title="4. 创建 Vue 应用实例"></a>4. 创建 Vue 应用实例</h2><p>在 src 目录下，创建以下文件和内容：</p>
<h3 id="1-src-main-ts"><a href="#1-src-main-ts" class="headerlink" title="(1) src&#x2F;main.ts"></a>(1) src&#x2F;main.ts</h3><p>用于客户端应用的入口：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;./app&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; app, router &#125; = <span class="title function_">createApp</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动 Vue 应用</span></span><br><span class="line">router.<span class="title function_">isReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="2-src-app-ts"><a href="#2-src-app-ts" class="headerlink" title="(2) src&#x2F;app.ts"></a>(2) src&#x2F;app.ts</h3><p>用于创建 Vue 应用的通用函数：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSSRApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&#x27;./routes&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createApp</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="title function_">createSSRApp</span>(&#123;&#125;);</span><br><span class="line">  <span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">    routes,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line"></span><br><span class="line">  app.<span class="title function_">use</span>(router);</span><br><span class="line">  app.<span class="title function_">use</span>(pinia);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; app, router, pinia &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="3-src-routes-ts"><a href="#3-src-routes-ts" class="headerlink" title="(3) src&#x2F;routes.ts"></a>(3) src&#x2F;routes.ts</h3><p>配置客户端和服务端共享的路由：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./pages/Home.vue&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./pages/About.vue&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<h2 id="5-创建-SSR-服务端入口"><a href="#5-创建-SSR-服务端入口" class="headerlink" title="5. 创建 SSR 服务端入口"></a>5. 创建 SSR 服务端入口</h2><p>创建 src&#x2F;entry-server.ts 文件，用于服务端渲染：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;./app&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"><span class="attr">url</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; app, router &#125; = <span class="title function_">createApp</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置当前路由</span></span><br><span class="line">  router.<span class="title function_">push</span>(url);</span><br><span class="line">  <span class="keyword">await</span> router.<span class="title function_">isReady</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取 HTML</span></span><br><span class="line">  <span class="keyword">const</span> appContent = <span class="keyword">await</span> <span class="title function_">renderToString</span>(app);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">    &lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;Vue SSR&lt;/title&gt;</span></span><br><span class="line"><span class="string">      &lt;/head&gt;</span></span><br><span class="line"><span class="string">      &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;div id=&quot;app&quot;&gt;<span class="subst">$&#123;appContent&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;script type=&quot;module&quot; src=&quot;/src/main.ts&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">      &lt;/body&gt;</span></span><br><span class="line"><span class="string">    &lt;/html&gt;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-创建-Express-服务"><a href="#6-创建-Express-服务" class="headerlink" title="6. 创建 Express 服务"></a>6. 创建 Express 服务</h2><p>在项目根目录下，创建 server.js 文件，用于搭建服务端渲染服务器：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">&#x27;./src/entry-server&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供静态文件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;dist/client&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端渲染</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;*&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> html = <span class="keyword">await</span> <span class="title function_">render</span>(req.<span class="property">url</span>);</span><br><span class="line">  res.<span class="title function_">send</span>(html);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server is running at http://localhost:3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="7-构建客户端和服务端"><a href="#7-构建客户端和服务端" class="headerlink" title="7. 构建客户端和服务端"></a>7. 构建客户端和服务端</h2><p>构建客户端和服务端文件：</p>
<h3 id="1-构建客户端："><a href="#1-构建客户端：" class="headerlink" title="(1) 构建客户端："></a>(1) 构建客户端：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run  build</span><br></pre></td></tr></table></figure>
<h3 id="2-构建服务端（入口为-entry-server-ts）："><a href="#2-构建服务端（入口为-entry-server-ts）：" class="headerlink" title="(2) 构建服务端（入口为 entry-server.ts）："></a>(2) 构建服务端（入口为 entry-server.ts）：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vite build --ssr src/entry-server.ts</span><br></pre></td></tr></table></figure>
<h2 id="8-运行服务-运行服务端渲染服务器："><a href="#8-运行服务-运行服务端渲染服务器：" class="headerlink" title="8. 运行服务 运行服务端渲染服务器："></a>8. 运行服务 运行服务端渲染服务器：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure>
<p>访问 <a class="link"   href="http://localhost:3000/" >http://localhost:3000<i class="fas fa-external-link-alt"></i></a> 测试服务端渲染是否成功。</p>
<h2 id="9-可选功能扩展"><a href="#9-可选功能扩展" class="headerlink" title="9. 可选功能扩展"></a>9. 可选功能扩展</h2><ol>
<li>SEO 支持：可以添加 meta 标签动态注入逻辑。</li>
<li>API 数据渲染：结合服务端 API 数据，在服务端预渲染页面数据。</li>
<li>Hydration 支持：优化客户端挂载性能。<br>这样，你就完成了一个基于 Vue 3 的完整 SSR 系统</li>
</ol>
]]></content>
      <categories>
        <category>ssr</category>
      </categories>
      <tags>
        <tag>ssr</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack+vue+element</title>
    <url>/2024/12/24/webpack-vue-element/</url>
    <content><![CDATA[<p>要在Vue项目中安装Element UI组件库，首先确保你已经初始化并运行了一个Vue项目。以下是安装Element UI的步骤：</p>
<p>打开终端或命令提示符。</p>
<p>切换到你的Vue项目目录。</p>
<p>运行以下命令来安装Element UI：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install element-ui --save</span><br></pre></td></tr></table></figure>
<p>在你的Vue项目中引入Element UI。你可以在main.js文件中全局引入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>现在你可以在Vue组件中使用Element UI组件了。例如，使用一个Element UI的按钮组件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot;&gt;点击我&lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // 组件逻辑</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>确保你的Vue项目配置能正确处理.css文件，这样Element UI的样式才能被正确加载。</p>
]]></content>
  </entry>
  <entry>
    <title>webpack+vue+i18n</title>
    <url>/2024/12/24/webpack-vue-i18n/</url>
    <content><![CDATA[<p>在Vue项目中实现国际化，通常可以使用vue-i18n插件。以下是一个简单的示例：</p>
<p>安装vue-i18n：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue-i18n</span><br></pre></td></tr></table></figure>
<p>配置vue-i18n：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// i18n.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createI18n &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> messages = &#123;</span><br><span class="line">  <span class="attr">en</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: &#123;</span><br><span class="line">      <span class="attr">hello</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">fr</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: &#123;</span><br><span class="line">      <span class="attr">hello</span>: <span class="string">&#x27;bonjour&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> i18n = <span class="title function_">createI18n</span>(&#123;</span><br><span class="line">  <span class="attr">locale</span>: <span class="string">&#x27;en&#x27;</span>, <span class="comment">// set default locale</span></span><br><span class="line">  <span class="attr">fallbackLocale</span>: <span class="string">&#x27;en&#x27;</span>, <span class="comment">// set fallback locale</span></span><br><span class="line">  messages, <span class="comment">// set locale messages</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n;</span><br></pre></td></tr></table></figure>
<p>在Vue项目中使用vue-i18n：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;./i18n&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">use</span>(i18n);</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>在组件中使用国际化信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;&#123; $t(&quot;message.hello&quot;) &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<p>切换语言：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在组件中</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$i18n</span>.<span class="property">locale</span> = <span class="string">&#x27;zh&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>以上代码实现了Vue项目的基本国际化功能，并提供了切换语言的方法。在实际应用中，可以根据用户选择或浏览器设置自动切换语言。</p>
]]></content>
  </entry>
  <entry>
    <title>webpack构建项目</title>
    <url>/2024/12/24/webpack/</url>
    <content><![CDATA[<h1 id="构建vue项目"><a href="#构建vue项目" class="headerlink" title="构建vue项目"></a>构建vue项目</h1><p>为了使用Webpack搭建一个Vue项目，你需要执行以下步骤：</p>
<ol>
<li><p>初始化一个新的npm项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure></li>
<li><p>安装Vue和Webpack及其相关依赖：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue vue-loader vue-style-loader css-loader webpack webpack-cli webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure></li>
<li><p>创建一个简单的Vue组件src&#x2F;App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1&gt;Hello Vue with Webpack!&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>创建Webpack配置文件webpack.config.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;vue-loader&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="string">&#x27;vue-style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>创建Vue入口文件src&#x2F;main.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>在项目根目录下添加一个简单的HTML文件作为入口页面public&#x2F;index.html：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue with Webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在package.json中添加一个脚本来运行Webpack开发服务器：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server --open&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --mode production&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>运行以下命令来启动开发服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure>
<p>这将启动一个本地服务器，并在浏览器中打开你的Vue应用。</p>
</li>
<li><p>运行以下命令来构建生产版本的项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>
<p>这将生成一个可供生产环境部署的dist&#x2F;bundle.js文件。</p>
</li>
</ol>
<h1 id="构建react项目"><a href="#构建react项目" class="headerlink" title="构建react项目"></a>构建react项目</h1><p>以下是使用Webpack搭建React项目的基本步骤和配置示例：</p>
<ol>
<li>初始化项目并安装依赖：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm install --save react react-dom</span><br><span class="line">npm install --save-dev webpack webpack-cli webpack-dev-server</span><br></pre></td></tr></table></figure></li>
<li>创建React组件示例：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/App.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, React!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure></li>
<li>创建Webpack配置文件：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/App.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="attr">use</span>: &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>, <span class="string">&#x27;@babel/preset-react&#x27;</span>],</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">contentBase</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
安装Babel来转换JSX和ES6：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @babel/core @babel/preset-env @babel/preset-react</span><br></pre></td></tr></table></figure>
创建Babel配置文件：<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .babelrc</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;@babel/preset-env&quot;</span><span class="punctuation">,</span> <span class="string">&quot;@babel/preset-react&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
在package.json中添加启动脚本：<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server --mode development&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --mode production&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
运行以下命令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm start <span class="comment"># 启动开发服务器</span></span><br><span class="line">npm run build <span class="comment"># 构建生产版本</span></span><br></pre></td></tr></table></figure>
以上步骤和配置将帮助你用Webpack搭建一个基本的React项目。这个项目包括了基础的Webpack配置，能够将React组件打包，并且使用Webpack Dev Server提供一个本地开发服务器。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Welcome to use Hexo Theme Keep</title>
    <url>/2022/10/25/welcome-to-use-hexo-theme-keep/</url>
    <content><![CDATA[<p>Welcome to use Hexo Theme Keep.</p>
<p>This is your very first post. Check <a class="link"   href="https://keep-docs.xpoet.cn/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Keep theme, you can ask me on <a class="link"   href="https://github.com/XPoet/hexo-theme-keep/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<span id="more"></span>

<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/keep-slogan.svg"
                        alt="keep-slogan"
                 ></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Keep</tag>
      </tags>
  </entry>
</search>
